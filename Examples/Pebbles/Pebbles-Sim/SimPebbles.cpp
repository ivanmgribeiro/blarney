// Generated by Blarney
#include <verilated.h>
#include "VSimPebbles.h"
#include <iostream>
#include <deque>
#include <pthread.h>
#include <stdlib.h>
VSimPebbles *top;
vluint64_t main_time = 0;
// Called by $time in Verilog
double sc_time_stamp () {
  return main_time;
}


static pthread_t input_thread;
static pthread_mutex_t input_lock = PTHREAD_MUTEX_INITIALIZER;
static std::deque<uint8_t> input_buf;

static void *input_worker(void *data __attribute__((unused))) {
    int c;
    while ((c = std::cin.get()) != EOF) {
        pthread_mutex_lock(&input_lock);
        if (c == '!') {
            input_buf.push_back('\r');
        } else if (c != '\n') {
            input_buf.push_back(c);
        }
        pthread_mutex_unlock(&input_lock);
    }
    return NULL;
}

int main(int argc, char** argv) {
  Verilated::commandArgs(argc, argv);
  top = new VSimPebbles;
  pthread_create(&input_thread, NULL, input_worker, NULL);
  while (!Verilated::gotFinish()) {
    pthread_mutex_lock(&input_lock);
    if (top->in_uartInput_consume_en) {
      //std::cout << "top consumed " << std::endl;
      input_buf.pop_front();
    }
    top->in_uartInput_canPeek = input_buf.size() > 0;
    top->in_uartInput_peek = input_buf.front();
    pthread_mutex_unlock(&input_lock);

    top->clock = 1; top->eval();
    top->clock = 0; top->eval();
    main_time++;
  }
  top->final(); delete top; return 0;
}
